def solve(n, nums):
    # CODE HERE
    i=len(nums)-2
    while i>=0 and nums[i]>nums[i+1]:
        i=i-1
    j=len(nums)-1
    while j>i and nums[i]>nums[j]:
        j=j-1
    nums[i],nums[j]=nums[j],nums[i]
    left,right=i+1,len(nums)-1
    while left<right:
        nums[left],nums[right]=nums[right],nums[left]
        left=left+1
        right=right-1
    return nums

n=3
nums=[1,2,3]
print(solve(n,nums))

# Maximum Product subarray
def solve(n, arr):
    # CODE HERE
    max_pro=0
    prefix=1
    suffix=1
    if n==1:
        max_pro=arr[0]
    for i in range(n):
        if prefix==0:
            prefix=1
        if suffix==0:
            suffix=1
        prefix=prefix*arr[i]
        if prefix>max_pro:
            max_pro=prefix
        suffix=suffix*arr[n-i-1]
        if suffix>max_pro:
            max_pro=suffix
    return max_pro
n=5
arr=[6,-3,-10,0,2]
print(solve(n,arr))

# Next Greater Element
def solve(n,nums):
    nge=[0]*n
    st=[]
    for i in range(2*n-1,-1,-1):
        while st and st[-1]<=nums[i%n]:
            st.pop()
        if i<n:
            if st:
                nge[i]=st[-1] 
            else:
                nge[i]=-1
        st.append(nums[i%n])
    return nge

n=4
nums=[1,3,2,4]
print(solve(n,nums))      

# Container with most water
def solve(n,arr):
    max_water=0
    l=0
    r=n-1
    while l<=r:
        curr_water=min(arr[l],arr[r])*(r-l)
        if curr_water>max_water:
            max_water=curr_water
        if arr[l]<arr[r]:
            l=l+1
        else:
            r=r-1
    return max_water

n=9
arr=[1,8,6,2,5,4,8,3,7]
print(solve(n,arr))

# Binary Search

#Brute force
def solve(n,nums,target):
    for i in range(n):
        if nums[i]==target:
            return i
    return -1
n=6
nums=[-1,0,3,5,9,12]
target=9
print(solve(n,nums,target))

#Optimal solution
def solve(n,nums,target):
    l=0
    r=n-1
    while l<=r:
        mid=(l+r)//2
        if target==nums[mid]:
            return mid
        if target<nums[mid]:
            r=mid-1
        else:
            l=mid+1
    return -1
n=6
nums=[-1,0,3,5,9,12]
target=9
print(solve(n,nums,target))

# Two Sum

#Brute force
def solve(n,nums,target):
    for i in range(n):
        for j in range(1,n):
            if nums[i]+nums[j]==target:
                return [i,j]
n=4
nums=[2,7,11,15]
target=9
print(solve(n,nums,target))

# Optimal solution
def solve(n,nums,target):
    d={}
    for i in range(len(nums)):
        curr_nums=nums[i]
        pair_num=target-curr_nums
        if pair_num in d:
            return [d[pair_num],i]
        d[nums[i]]=i
n=4
nums=[2,7,11,15]
target=9
print(solve(n,nums,target))